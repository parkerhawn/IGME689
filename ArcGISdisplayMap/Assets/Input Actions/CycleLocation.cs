//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/CycleLocation.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CycleLocation: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CycleLocation()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CycleLocation"",
    ""maps"": [
        {
            ""name"": ""CycleLocationActions"",
            ""id"": ""277f03fd-19d4-426f-88a1-c949294b9198"",
            ""actions"": [
                {
                    ""name"": ""CycleLocationForward"",
                    ""type"": ""Button"",
                    ""id"": ""1a4358de-1d20-4fa7-8057-8f376fb733cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleLocationBackward"",
                    ""type"": ""Button"",
                    ""id"": ""a8f2264c-01b8-4973-b8fb-0a901d6a28dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e1f5ecf-def4-45d8-9a4b-02ab34f6a8f7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleLocationForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fae3d3a-f475-492f-90e4-6a1f3fbdf4b0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleLocationBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CycleLocationActions
        m_CycleLocationActions = asset.FindActionMap("CycleLocationActions", throwIfNotFound: true);
        m_CycleLocationActions_CycleLocationForward = m_CycleLocationActions.FindAction("CycleLocationForward", throwIfNotFound: true);
        m_CycleLocationActions_CycleLocationBackward = m_CycleLocationActions.FindAction("CycleLocationBackward", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CycleLocationActions
    private readonly InputActionMap m_CycleLocationActions;
    private List<ICycleLocationActionsActions> m_CycleLocationActionsActionsCallbackInterfaces = new List<ICycleLocationActionsActions>();
    private readonly InputAction m_CycleLocationActions_CycleLocationForward;
    private readonly InputAction m_CycleLocationActions_CycleLocationBackward;
    public struct CycleLocationActionsActions
    {
        private @CycleLocation m_Wrapper;
        public CycleLocationActionsActions(@CycleLocation wrapper) { m_Wrapper = wrapper; }
        public InputAction @CycleLocationForward => m_Wrapper.m_CycleLocationActions_CycleLocationForward;
        public InputAction @CycleLocationBackward => m_Wrapper.m_CycleLocationActions_CycleLocationBackward;
        public InputActionMap Get() { return m_Wrapper.m_CycleLocationActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CycleLocationActionsActions set) { return set.Get(); }
        public void AddCallbacks(ICycleLocationActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_CycleLocationActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CycleLocationActionsActionsCallbackInterfaces.Add(instance);
            @CycleLocationForward.started += instance.OnCycleLocationForward;
            @CycleLocationForward.performed += instance.OnCycleLocationForward;
            @CycleLocationForward.canceled += instance.OnCycleLocationForward;
            @CycleLocationBackward.started += instance.OnCycleLocationBackward;
            @CycleLocationBackward.performed += instance.OnCycleLocationBackward;
            @CycleLocationBackward.canceled += instance.OnCycleLocationBackward;
        }

        private void UnregisterCallbacks(ICycleLocationActionsActions instance)
        {
            @CycleLocationForward.started -= instance.OnCycleLocationForward;
            @CycleLocationForward.performed -= instance.OnCycleLocationForward;
            @CycleLocationForward.canceled -= instance.OnCycleLocationForward;
            @CycleLocationBackward.started -= instance.OnCycleLocationBackward;
            @CycleLocationBackward.performed -= instance.OnCycleLocationBackward;
            @CycleLocationBackward.canceled -= instance.OnCycleLocationBackward;
        }

        public void RemoveCallbacks(ICycleLocationActionsActions instance)
        {
            if (m_Wrapper.m_CycleLocationActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICycleLocationActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_CycleLocationActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CycleLocationActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CycleLocationActionsActions @CycleLocationActions => new CycleLocationActionsActions(this);
    public interface ICycleLocationActionsActions
    {
        void OnCycleLocationForward(InputAction.CallbackContext context);
        void OnCycleLocationBackward(InputAction.CallbackContext context);
    }
}
